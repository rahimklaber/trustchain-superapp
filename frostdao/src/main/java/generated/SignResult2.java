// Automatically generated by flapigen
package generated;


public final class SignResult2 {

    public SignResult2() {
        mNativeObj = init();
    }
    private static native long init();

    public final byte [] get_share() {
        byte [] ret = do_get_share(mNativeObj);

        return ret;
    }
    private static native byte [] do_get_share(long self);

    public static SchnorrSignWrapper get_wrapper(SignResult2 res) {
        long a0 = res.mNativeObj;
        res.mNativeObj = 0;

        long ret = do_get_wrapper(a0);
        SchnorrSignWrapper convRet = new SchnorrSignWrapper(InternalPointerMarker.RAW_PTR, ret);
        java.lang.ref.Reference.reachabilityFence(res);

        return convRet;
    }
    private static native long do_get_wrapper(long res);

    public synchronized void delete() {
        if (mNativeObj != 0) {
            do_delete(mNativeObj);
            mNativeObj = 0;
       }
    }
    @Override
    protected void finalize() throws Throwable {
        try {
            delete();
        }
        finally {
             super.finalize();
        }
    }
    private static native void do_delete(long me);
    /*package*/ SignResult2(InternalPointerMarker marker, long ptr) {
        assert marker == InternalPointerMarker.RAW_PTR;
        this.mNativeObj = ptr;
    }
    /*package*/ long mNativeObj;
}